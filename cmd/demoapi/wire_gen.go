// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"demoapi/internal/conf"
	"demoapi/internal/http/live_http"
	"demoapi/internal/pkg/middlewares/auth"
	"demoapi/internal/repository"
	"demoapi/internal/repository/xes_activity/live_room"
	"demoapi/internal/router"
	"demoapi/internal/server"
	"demoapi/internal/service/live_service"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/openzipkin/zipkin-go"
	"github.com/openzipkin/zipkin-go/reporter/http"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, config *conf.Config, data *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	engine := server.NewGinHttpRouter(logger, config)
	adminAuth := auth.NewAdminAuth(config, logger)
	activityDB, cleanup, err := repository.NewActivityDB(data, logger)
	if err != nil {
		return nil, nil, err
	}
	iLiveRoomDao := live_room.NewLiveRoomDao(activityDB, logger)
	liveRoomService := live_service.NewLiveRoomService(logger, iLiveRoomDao)
	liveRoomHttp := live_http.NewLiveRoomHttp(liveRoomService, logger, config)
	tracer, cleanup2, err := newZipkinTracer(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, err := newElasticsearchClient(config)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	ginRouter := router.RegisterRouter(engine, config, adminAuth, liveRoomHttp, tracer, client)
	httpServer := server.NewGinHttpServer(confServer, logger, ginRouter)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

// newElasticsearchClient creates a new Elasticsearch client.
func newElasticsearchClient(config *conf.Config) (*elasticsearch.Client, error) {
	esURL := "https://localhost:9200"
	cfg := elasticsearch.Config{
		Addresses: []string{esURL},
		Username:  "elastic",
		Password:  "123456",
	}
	client, err := elasticsearch.NewClient(cfg)
	if err != nil {
		return nil, err
	}
	return client, nil
}

// newZipkinTracer creates a new Zipkin tracer.
func newZipkinTracer(config *conf.Config) (*zipkin.Tracer, func(), error) {
	zipkinURL := "http://localhost:9411/api/v2/spans"
	reporter := http.NewReporter(zipkinURL)
	endpoint, _ := zipkin.NewEndpoint("demo-api", "localhost:8081")
	tracer, err := zipkin.NewTracer(reporter, zipkin.WithLocalEndpoint(endpoint))
	if err != nil {
		return nil, nil, err
	}
	cleanup := func() {
		reporter.Close()
	}
	return tracer, cleanup, nil
}
